const express = require('express');
const app = express();
const port = 3000;

app.get('/mean', (req, res) => {
  // Calculate mean here
});

app.get('/median', (req, res) => {
  // Calculate median here
});

app.get('/mode', (req, res) => {
  // Calculate mode here
});

app.listen(port, () => {
  console.log(`Statistical Operations Application listening at http://localhost:${port}`);
});

app.get('/mean', (req, res) => {
  const nums = req.query.nums.split(',').map(num => parseInt(num));
  const mean = nums.reduce((acc, curr) => acc + curr, 0) / nums.length;
  res.send(`Mean: ${mean}`);
});

app.get('/median', (req, res) => {
  const nums = req.query.nums.split(',').map(num => parseInt(num)).sort((a, b) => a - b);
  const median = nums.length % 2 === 0 ? (nums[nums.length / 2 - 1] + nums[nums.length / 2]) / 2 : nums[Math.floor(nums.length / 2)];
  res.send(`Median: ${median}`);
});

app.get('/mode', (req, res) => {
  const nums = req.query.nums.split(',').map(num => parseInt(num));
  const modeMap = {};
  let maxCount = 0;
  let modes = [];

  nums.forEach(num => {
    modeMap[num] = (modeMap[num] || 0) + 1;
    if (modeMap[num] > maxCount) {
      maxCount = modeMap[num];
      modes = [num];
    } else if (modeMap[num] === maxCount) {
      modes.push(num);
    }
  });

  res.send(`Mode: ${modes}`);
});

function handleErrors(req, res, next) {
    const nums = req.query.nums;

    if (!nums) {
        return res.status(400).send('nums are required.');
    }

    const numbers = nums.split(',').map(Number);

    if (numbers.includes(NaN)) {
        return res.status(400).send(`${nums} is not a number.`);
    }

    next();
}

function mean(numbers) {
    // Mean calculation logic
}

function median(numbers) {
    // Median calculation logic
}

function mode(numbers) {
    // Mode calculation logic
}

// Unit tests for mean, median, and mode functions
